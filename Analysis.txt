Once you have completed your solution for each problem, perform a run time analysis (Worst Case Big-O Notation) of your solution. Document this for each problem and include this in your submission.

TASK0 
1. Reading each of the files is an O(n) operation.
2. Printing out information about the first call and last text is O(1) each.

 Overall, the time complexity is O(n).


 
TASK1
1. Reading each of the .csv files is O(n).
2. For each call and each text in the data set, both numbers involved are added to a set. This is O(n) because appending to a set is O(1).
3. Printing the length of the set is O(1).
Overall, the time complexity is O(n).

I used set to store the telephone numbers and the add function in set adds an element to the set if it is not already present in the set.
Hence, it would solve the problem of displaying distinct telephone numbers.



TASK2 
1. Reading each of the .csv files is O(n).
2. For each call and each text in the data set, if the number is not in the dictionary, {number, time spent on call} is added to the dictionary. This is O(n) because adding to a dictionary is O(1).
3. Calculating maximum takes as you have to go through the dictionary values to find the same: O(n)
4. Printing the output takes: O(1)

Overall, the time complexity is O(n).
I used dictionary to store the telephone numbers and time spent on call. Dictionary stores key, value pairs which makes it suitable to solve the question.




TASK3 
1.	Reading each of the .csv files is O(n).
2.	For each call in the data set, check if the calling number matches the regular expression to calculate calls from "fixed line in BNG to fixed line in BNG"; Check if the recieving number is in the dictionary and then add the number of calls to get the frequency of the calls from every code: hence this for loop is O(n)
7.	Printing the output % is O(1)
8.	Printing the sorted values : I used the inbuilt sorting function in python- this is timsort(exceptionally adaptive merge sort)- O(nlogn)
 
Overall, the time complexity is O(n + n log n)
Time complexity is O(n)
Dictionary is used to maintain the key value pairs and maintain the uniqueness, assigning the dictionary with key and value is executed once for every if-else condition


TASK4 
1. Reading each of the .csv files is O(n).
2. For each call in the data set, append the value of the telephone numbern into the array which are present as a calling number , remove the entry from the array when this entry is a recieving number / recieving text/ sending text. This for loop takes O(n)
3. Printing the sorted values : I used the inbuilt sorting function of python- this is timsort(exceptionally adaptive merge sort)- O(nlogn)

Overall, the time complexity is O(n + nlog n).
Time complexity is O(n)